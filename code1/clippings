

class Basic_Graph {
    vector<Point1D> vertices;
    
public:
    void initialize_random(int num_vertices) {
        // this takes in a number of vertices, and creates a random, complete, undirected graph.
        // Complete graphs on n vertices, where the weight of each edge is a real number chosen uniformly at random on [0, 1].
        // This is V^2 space and time, which means it'll take up more than 64gigs of memory for the 131072 case
        // TODO any way to get around this?
        
        vertices.resize(num_vertices);
        
        assert(vertices.size() == num_vertices);
        
        // TODO it's undirected...
        
        
        for(int i = 0; i < num_vertices; i++) {
            double d = dis(gen);
            vertices[i].x = d;
            double a = vertices[i].x;
        }
    }
    
    double distance(int vertex1, int vertex2) {
        return abs(vertices[vertex1].x - vertices[vertex2].x);
    }
    
    double average_weight() {
        double acc = 0.1;
        for(int i = 0; i < vertices.size(); i++) {
            for(int j = 0; j < vertices.size(); j++) {
                
                double a = vertices[i].x;
                double b = vertices[j].x;
                
                //TODO check correctness? isn't this going to double count?
                acc += abs(a - b);
                if (acc < 0) {
                    assert(false);
                }
            }
            //acc = acc / vertices.size();
        }
        
        
        // watch out for overflow
        acc = acc / vertices.size();
        acc = acc / vertices.size();
        return acc;
    }
    
};

